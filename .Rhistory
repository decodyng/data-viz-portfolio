names(fatal.setup) <- c("year", "month","deaths")
fatal.setup$yearmonth <- paste(fatal.setup$year, fatal.setup$month, sep="-")
fatal.setup$date <- as.Date(as.yearmon(fatal.setup$yearmonth))
date_seq <- seq(from=min(fatal.setup$date),to=max(fatal.setup$date),by=1) %>% as.data.frame
names(date_seq) <- 'date'
fatal.setup <- left_join(date_seq,fatal.setup,by='date')
fatal.setup[is.na(fatal.setup$deaths),3] <- 0
fatal.ts <- ts(fatal.setup$deaths,frequency=1,start=min(fatal.setup$date))
non_fatal.setup$yearmonth <- paste(fatal.setup$year, fatal.setup$month, sep="-")
names(non_fatal.setup) <- c("year", "month","deaths")
non_fatal.setup <- non_fatal %>% group_by(year(event_date), month(event_date))  %>%
summarize(n())
names(non_fatal.setup) <- c("year", "month","deaths")
non_fatal.setup$yearmonth <- paste(non_fatal.setup$year, non_fatal.setup$month, sep="-")
non_fatal.setup$date <- as.Date(as.yearmon(non_fatal.setup$yearmonth))
date_seq <- seq(from=min(non_fatal.setup$date),to=max(non_fatal.setup$date),by=1) %>% as.data.frame
names(date_seq) <- 'date'
non_fatal.setup <- left_join(date_seq,non_fatal.setup,by='date')
non_fatal.setup <- non_fatal %>% group_by(year(event_date), month(event_date))  %>%
summarize(n())
non_fatal.setup$yearmonth <- paste(non_fatal.setup$year, non_fatal.setup$month, sep="-")
non_fatal.setup <- non_fatal %>% group_by(year(event_date), month(event_date))  %>%
summarize(n())
names(non_fatal.setup) <- c("year", "month","deaths")
non_fatal.setup$yearmonth <- paste(non_fatal.setup$year, non_fatal.setup$month, sep="-")
non_fatal.setup$date <- as.Date(as.yearmon(non_fatal.setup$yearmonth))
date_seq <- seq(from=min(non_fatal.setup$date),to=max(non_fatal.setup$date),by=1) %>% as.data.frame
non_fatal.setup$date<- seq(non_fatal.setup$date) %>% as.data.frame
head(fatal.ts)
fatal.setup <- fatal %>% group_by(year(event_date), month(event_date)) %>%
summarize(n())
names(fatal.setup) <- c("year", "month","deaths")
fatal.setup$yearmonth <- paste(fatal.setup$year, fatal.setup$month, sep="-")
fatal.setup$date <- as.Date(as.yearmon(fatal.setup$yearmonth))
date_seq <- seq(from=min(fatal.setup$date),to=max(fatal.setup$date),by="1 month") -1 %>% as.data.frame
date_seq <- seq(from=min(fatal.setup$date),to=max(fatal.setup$date),by="1 month") %>% as.data.frame
head(date_seq)
names(date_seq) <- 'date'
fatal.setup <- left_join(date_seq,fatal.setup,by='date')
head(fatal.setup)
fatal.setup[is.na(fatal.setup$deaths),4] <- 0
fatal.ts <- ts(fatal.setup$deaths,frequency=1,start=min(fatal.setup$date))
date_seq <- seq(from=min(non_fatal.setup$date),to=max(non_fatal.setup$date),by="1 month") %>% as.data.frame
names(date_seq) <- 'date'
non_fatal.setup <- left_join(date_seq,non_fatal.setup,by='date')
head(non_fatal.setup)
non_fatal.setup[is.na(non_fatal.setup$injuries),4] <- 0
non_fatal.setup <- non_fatal %>% group_by(year(event_date), month(event_date))  %>%
summarize(n())
names(non_fatal.setup) <- c("year", "month","injuries")
non_fatal.setup$yearmonth <- paste(non_fatal.setup$year, non_fatal.setup$month, sep="-")
non_fatal.setup$date <- as.Date(as.yearmon(non_fatal.setup$yearmonth))
non_fatal.setup$date<- seq(non_fatal.setup$date) %>% as.data.frame
date_seq <- seq(from=min(non_fatal.setup$date),to=max(non_fatal.setup$date),by="1 month") %>% as.data.frame
non_fatal.setup <- non_fatal %>% group_by(year(event_date), month(event_date))  %>%
summarize(n())
names(non_fatal.setup) <- c("year", "month","injuries")
non_fatal.setup$yearmonth <- paste(non_fatal.setup$year, non_fatal.setup$month, sep="-")
non_fatal.setup$date <- as.Date(as.yearmon(non_fatal.setup$yearmonth))
date_seq <- seq(from=min(non_fatal.setup$date),to=max(non_fatal.setup$date),by="1 month") %>% as.data.frame
names(date_seq) <- 'date'
non_fatal.setup <- left_join(date_seq,non_fatal.setup,by='date')
non_fatal.setup[is.na(non_fatal.setup$injuries),4] <- 0
non_fatal.ts <- ts(non_fatal.setup$injuries,frequency=1,start=min(non_fatal.setup$date))
total.ts <- fatal.ts + non_fatal.ts
all.ts <- list(fatal.ts,non_fatal.ts,total.ts)
plot(total.ts)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
set.seed(975)
training <- quandBoundaryFunc(500)
training <- quadBoundaryFunc(500)
testing <- quandBoundaryFunc(1000)
testing$class2 ifelse(testing$class == "Class1", 1, 0)
testing$class2 <- ifelse(testing$class == "Class1", 1, 0)
testing <- quadBoundaryFunc(1000)
testing$class2 <- ifelse(testing$class == "Class1", 1, 0)
testing$ID <- 1:nrow(testing)
library(randomForest)
install.packages('C50')
library(C50)
ch <- data(churn)
ch
head(churnTest)
head(churnTrain)
?pairs
pairs(churnTrain)
pairs(churnTrain)
?pairs
plot(account_length ~ churn, data=churnTrain)
plot(international_plan ~ churn, data=churnTrain)
cor(international_plan, churn)
cor(churnTrain$international_plan, churnTrain$churn)
yesDat <- churnTrain[churnTrain$churn = 'yes']
yesDat <- churnTrain[churnTrain$churn == 'yes']
yesDat <- churnTrain[churnTrain$churn == 'yes',]
yesDat <- churnTrain[churnTrain$churn == 'no',]
yesDat <- churnTrain[churnTrain$churn == 'yes',]
noDat <- churnTrain[churnTrain$churn == 'no',]
summary(yesDat$international_plan)
summary(noDat$international_plan)
names(noDat)
summary(noDat$total_day_minutes)
summary(yesDat$total_day_minutes)
plot(churn~total_day_minutes)
plot(churn~total_day_minutes, data=churnTrain)
plot(total_day_minutes~churn, data=churnTrain)
plot(total_day_charge~churn, data=churnTrain)
cor(total_day_minutes, total_day_charge)
cor(churnTrain$total_day_minutes, churnTrain$total_day_charge)
cor(churnTrain$total_day_calls, churnTrain$total_day_charge)
plot(total_day_calls~churn, data=churnTrain)
plot(total_eve_minutes~churn, data=churnTrain)
cor(churnTrain$total_eve_minutes, churnTrain$total_eve_charge)
plot(total_night_minutes~churn, data=churnTrain)
plot(total_intl_minutes~churn, data=churnTrain)
cor(churnTrain$total_day_minutes, churnTrain$total_day_minutes)
plot(number_customer_service_calls~churn, data=churnTrain)
plot(account_length~churn, data=churnTrain)
head(churnTest)
?randomForest
plot(total_intl_calls~churn, data=churnTrain)
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+num_customer_service_calls+total_intl_calls, data=churnTrain)
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls, data=churnTrain)
head(churnTrain)
type(churnTrain$total_day_minutes)
typeof(churnTrain$total_day_minutes)
typeof(churnTrain$total_eve_minutes)
typeof(churnTrain$international_plan)
typeof(churnTrain$number_customer_service_calls)
typeof(churnTrain$total_intl_calls)
type(churnTotal$churn)
typeof(churnTotal$churn)
typeof(churnTrain$churn)
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls, data=churnTrain, na.action=na.exclude)
churnTrain[which(is.nan(churnTrain))] = NA
churnTrain[which(churnTrain==Inf)] = NA
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls, data=churnTrain, na.action=na.exclude)
summary(churn)
summary(churnTrain$churn)
summary(churnTrain$total_day_minutes)
summary(churnTrain$total_eve_minutes)
churnTrain[which(is.nan(churnTrain$total_day_minutes))] = NA
churnTrain[which(is.nan(churnTrain$total_intl_calls))] = NA
churnTrain[which(is.nan(churnTrain$total_eve_minutes))] = NA
churnTrain[which(is.nan(churnTrain$international_plan))] = NA
churnTrain[which(is.nan(churnTrain$number_customer_service_calls))] = NA
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls, data=churnTrain, na.action=na.exclude)
churnTrain[which(churnTrain==-Inf)] = NA
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls, data=churnTrain, na.action=na.exclude)
lf_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls,
family=binomial, data=churnTrain, na.action=na.exclude)
lf_model.summary
summary(lf_model)
lf_model.predict(churnTest)
predict
glm
glm
?glm
predict(lf_model)
predict(lf_model, newdata=churnTest)
predictions <- predict(lf_model, newdata=churnTest)
library(randomForest)
library(caret)
rfFit <- randomForest(churn ~ total_day_minutes+total_eve_minutes+international_plan+
number_customer_service_calls+total_intl_calls, data = churnTrain, ntree = 2000)
lf_predictions
predictions
lf_predictions <- predictions
rf_predictions <- predict(rfFit, churnTest, type = "prob")
rf_predictions
rf_predictions <- predict(rfFit, churnTest, type = "prob")[,1]
summary(rf_model)
rf_model <- randomForest(churn ~ total_day_minutes+total_eve_minutes+international_plan+
number_customer_service_calls+total_intl_calls, data = churnTrain, ntree = 2000)
summary(rf_model)
rf_model <- randomForest(churn ~ total_day_minutes+total_eve_minutes+international_plan+
number_customer_service_calls+total_intl_calls, data = churnTrain, ntree = 500)
summary(rf_model)
rf_predictions <- predict(rfFit, churnTest, type = "prob")[,1]
rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
library(klaR)
install.packages('klaR')
library(klaR)
head(churnTest)
length(churnTest)
confusionMatrix(rf_predictions,churnTest$churn)
confusionMatrix(lf_predictions,churnTest$churn)
churnTest[which(is.nan(churnTest$total_day_minutes))] = NA
churnTest[which(is.nan(churnTest$total_eve_minutes))] = NA
churnTest[which(is.nan(churnTest$total_intl_calls))] = NA
churnTest[which(is.nan(churnTest$international_plan))] = NA
churnTest[which(is.nan(churnTest$number_customer_service_calls))] = NA
churnTest[which(churnTest==-Inf)] = NA
confusionMatrix(lf_predictions,churnTest$churn)
print head(lf_predictions)
head(lf_predictions)
head(churnTest)
head(lf_predictions)
head(churnTest$churn)
lr_model <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls,
family=binomial, data=churnTrain, na.action=na.exclude)
library(AppliedPredictiveModeling)
set.seed(975)
training <- quadBoundaryFunc(500) #from APM
testing <- quadBoundaryFunc(1000)
testing$class2 <- ifelse(testing$class == "Class1", 1, 0)
testing$ID <- 1:nrow(testing)
library(randomForest)
rfFit <- randomForest(class ~ X1 + X2, data = training, ntree = 2000)
testing$rf <- predict(rfFit, testing, type = "prob")[,1]
liftCrv <- lift(class ~ testing$rf, data=testing)
xyplot(liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
churnTest$rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest)
xyplot(liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
head(rf_predictions)
summary(lr_model)
?predict.glm
head(churnTest[,1:19])
lf_predictions <- predict(lf_model, newdata=churnTest[,1:19])
head(lf_predictions)
head(churnTrain$churn)
churnTrain$churn <- as.character(churnTrain$churn)
churnTrain$numericChurn <- ifelse(churnTrain$churn == "yes", 1, 0)
lr_model <- glm(numericChurn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls,
family=binomial, data=churnTrain, na.action=na.exclude)
lf_predictions <- predict(lf_model, newdata=churnTest[,1:19])
lr_predictions <- predict(lr_model, newdata=churnTest[,1:19])
lr_predictions <- predict(lr_model, newdata=churnTest[,1:19], type="response")
churnTest$churn <- as.character(churnTest$churn)
churnTest$numericChurn <- ifelse(churnTest$churn == "yes", 1, 0)
lr_liftCrv <- lift( numericChurn ~ lr_predictions, data=churnTest)
churnTest$lr_predictions <- predict(lr_model, newdata=churnTest[,1:19], type="response")
lr_liftCrv <- lift(as.factor(numericChurn) ~ lr_predictions, data=churnTest)
xyplot(lr_liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
churnTest$reversed_predictions <- 1-churnTest$lr_predictions
lr_liftCrv <- lift(as.factor(numericChurn) ~ reversed_predictions, data=churnTest)
xyplot(lr_liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(rf_liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
rf_liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest)
xyplot(rf_liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
churnTrain$churn <- as.factor(churnTrain$churn)
churnTest$churn <- as.factor(churnTest$churn)
churnTest$lr_predictions2 <- predict(lr_model2, newdata=churnTest[,1:19], type="response")
lr_model2 <- glm(churn~total_day_minutes+total_eve_minutes+
international_plan+number_customer_service_calls+total_intl_calls,
family=binomial, data=churnTrain, na.action=na.exclude)
churnTest$lr_predictions2 <- predict(lr_model2, newdata=churnTest[,1:19], type="response")
lr_liftCrv2 <- lift(churn ~ lr_predictions2, data=churnTest)
xyplot(lr_liftCrv2, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_liftCrv2 <- lift(churn ~ (1-lr_predictions2), data=churnTest)
xyplot(lr_liftCrv2, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(lr_liftCrv, plot="lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
?xyplot
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(lr_liftCrv2, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
rf_model <- randomForest(churn ~ total_day_minutes+total_eve_minutes+international_plan+
number_customer_service_calls+total_intl_calls, data = churnTrain, ntree = 500)
summary(rf_model)
churnTest$rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
rf_liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest)
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
rf_model <- randomForest(churn ~ total_day_minutes+total_eve_minutes+international_plan+
number_customer_service_calls+total_intl_calls, data = churnTrain, ntree = 2000)
churnTest$rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
rf_liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest)
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
rf_model <- randomForest(churn ~., data = churnTrain, ntree = 2000)
churnTest$rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
rf_liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest)
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_model <- glm(numericChurn~.,
family=binomial, data=churnTrain, na.action=na.exclude)
rf_model <- randomForest(churn ~total_day_minutes+total_eve_minutes+international_plan+number_customer_service_calls+total_intl_calls, data = churnTrain, ntree = 2000)
churnTest$rf_predictions <- predict(rf_model, churnTest, type = "prob")[,1]
rf_liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest)
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
head(churnTest$rf_predictions)
head(churnTest$churn)
?lift
rf_liftCrv <- lift(churn ~ churnTest$rf_predictions, data=churnTest, class='yes')
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
rf_liftCrv <- lift(churn ~ (1-churnTest$rf_predictions), data=churnTest, class='yes')
xyplot(rf_liftCrv, plot="lift", main="Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_liftCrv2 <- lift(churn ~ (1-lr_predictions2), data=churnTest)
xyplot(lr_liftCrv2, plot="lift",  auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_liftCrv2 <- lift(churn ~ (1-lr_predictions2), data=churnTest, class='yes')
xyplot(lr_liftCrv2, plot="lift",  auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_liftCrv <- lift(as.factor(numericChurn) ~ reversed_predictions, data=churnTest)
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
head(churnTest$reversed_predictions)
lr_liftCrv <- lift(churn ~ reversed_predictions, data=churnTest, class='yes')
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_liftCrv <- lift(churn ~ reversed_predictions, data=churnTest)
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
plot(total_intl_calls~churn, data=churnTrain)
xyplot(lr_liftCrv, auto.key=list(columns=2,lines=TRUE,points=FALSE))
pred <- prediction(testing$rf, testing$class2)
library(ROCR)
install.packages('ROCR')
pred <- prediction(testing$rf, testing$class2)
?prediction
pred <- predict(testing$rf, testing$class2)
plot(perf,main="lift curve")
perf <- performance(pred, "lift","rpp")
xyplot(lr_liftCrv,main="Cumulative Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(rf_liftCrv,  main="Cumulative Random Forest Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
head(lr_predictions)
head(churnTest$churn)
lr_liftCrv <- lift(churn ~ lr_predictions, data=churnTest)
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
lr_liftCrv <- lift(churn ~ lr_predictions, data=churnTest, class='yes')
xyplot(lr_liftCrv, plot="lift", main="Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
xyplot(lr_liftCrv,main="Cumulative Logistic Regression Lift Curve", auto.key=list(columns=2,lines=TRUE,points=FALSE))
churnTest$lr_predictions_bin <- predict(lr_model, newdata=churnTest[,1:19])
churnTest$lr_predictions_bin <- predict(lr_model, newdata=churnTest)
head(churnTest$lr_predictions$bin)
head(churnTest$lr_predictions_bin)
head(churnTest$lr_predictions)
churnTest$bin_lr_pred <- ifelse(churnTest$lr_predictions >0.5, 1, 0)
head(churnTest$bin_lr_pred)
head(churnTest$numericChurn)
xtab <- table(churnTest$bin_lr_pred, churnTest$numericChurn)
confusionMatrix(xtab)
install.packages("e1071")
confusionMatrix(xtab)
churnTest$bin_rf_pred <- ifelse(churnTest$rf_predictions >0.5, 1, 0)
head(bin_rf_pred)
head(churnTest$bin_rf_pred)
churnTest$bin_rf_pred <- ifelse(churnTest$rf_predictions < 0.5, 1, 0)
xtab <- table(churnTest$bin_rf_pred, churnTest$numericChurn)
confusionMatrix(xtab)
churnTest$bin_lr_pred <- ifelse(churnTest$lr_predictions <0.5, 1, 0)
xtab <- table(churnTest$bin_lr_pred, churnTest$numericChurn)
confusionMatrix(xtab)
churnTest$bin_lr_pred <- ifelse(churnTest$lr_predictions >0.5, 1, 0)
xtab <- table(churnTest$bin_lr_pred, churnTest$numericChurn)
confusionMatrix(xtab)
483/3333
.8*483
.25*3333
.17*3333
833-386
566-386
?rmorn
rnorm
?rnorm
d <- rnorm(1500)
hist(d)
install.packages('blearn')
install.packages('bnlearn')
library('bnlearn')
d <- data(asia)
names(asia) = varnames
varnames = c("Asia", "Smoking", "Tub", "LC", "Bronchitis", "Tub-or-LC", "X-ray", "SoB")
names(asia) = varnames
bg = hc(asia)
graphviz.plot(bg)
package.install('Rgraphviz')
packages.insatll('Rgraphviz')
install.packages('Rgraphviz')
ource("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
df <- data.frame(
state.name,
state.abb,
state.x77,
state.region,
state.division,
row.names = NULL
)
head(df)
df$state.region <- as.factor(df$state.region)
df$state.division <- as.factor(df$state.division)
summary(df$state.region)
summary(df$state.division)
df <- data.frame(
state.name,
state.abb,
state.x77,
state.region,
state.division,
row.names = NULL
)
summary(murder)
head(df)
summary(df$Murder)
summary(df$Population)
hist(df$Population)
hist(df$Population, breaks=30)
summary(df$Income)
?state.x77
setwd("~/Desktop/ChannelMeter/competitors")
save.image("~/Desktop/ChannelMeter/competitors/env.RData")
categs<- read.csv('catfreq.csv')
categs.pca <- princomp(categs, cor=TRUE)
summary(categs.pca)
categs[is.na(categs)] <- 0
categs.pca <- princomp(categs, cor=TRUE)
head(categs)
categs_num <- categs[,2:19]
head(categs_num)
categs.pca <- princomp(categs_num, cor=TRUE)
summary(categs.pca)
head(categs_num, n=200)
cor(categs_num)
binaryHeatmap <- qplot(x=Var1, y=Var2, data=melt(cor(categs_num, use="p")), fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Correlations of Categories Presences")
library(ggplot)
library(ggplot2)
binaryHeatmap <- qplot(x=Var1, y=Var2, data=melt(cor(categs_num, use="p")), fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Correlations of Categories Presences")
library(dplyr)
binaryHeatmap <- qplot(x=Var1, y=Var2, data=melt(cor(categs_num, use="p")), fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Correlations of Categories Presences")
library(dplyr)
library(plyr)
binaryHeatmap <- qplot(x=Var1, y=Var2, data=melt(cor(categs_num, use="p")), fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Correlations of Categories Presences")
library(reshape)
binaryHeatmap <- qplot(x=Var1, y=Var2, data=melt(cor(categs_num, use="p")), fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Correlations of Categories Presences")
binaryHeatmap
qplot(x=Var1, y=Var2, data=melt(cor(categs_num, use="p")), fill=value, geom="tile") +
scale_fill_gradient2(limits=c(-1, 1)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ggtitle("Correlations of Categories Presences")
?cor
library(arules)
categs_bin <- ifelse(categs_num > 0, 1, 0)
head(categs_bin)
rules <- apriori(categs_bin)
inspect(rules)
?apriori
rules <- apriori(categs_bin, parameter=list(supp=0.01))
inspect(rules)
summary(categs_num)
categs_stand = categs_num/colSums(categs_num)
head(categs_stand)
head(colSums)
head(colSums(categs_num))
categs_stand = categs_num/rowSums(categs_num)
head(categs_stand)
summary(categs_stand)
cluster <- centroids_25_clusters.csv
cluster <- read.csv('centroids_25_clusters.csv')
?abs
clusterZeros <- ifelse(abs(cluster) < 0.5, 0, cluster)
head(cluster)
names(cluster)
clusterZeros <- ifelse(abs(as.numeric(cluster)) < 0.5, 0, cluster)
help(Seatbelts)
head(Seatbelts)
s <- Seatbelts
s <- as.data.frame(Seatbelts)
head(s)
help(UKDriverDeath)
help(UKDriverDeaths)
s$propKilled = s$DriversKilled/s$drivers
head(s)
plot(s$propKilled)
?plot
plot(s$propKilled, type="p")
plot(s$propKilled, type="l")
plot(s$DriversKilled, type="l")
plot(s$drivers, type="l")
plot(s$rear, type="l")
?Seatbelts
head(Seatbelts)
head(UKDriverDeaths)
?date
?Seatbelts
dateseq <- seq(as.Date("1969/1/1"), as.Date("1984/1/12"), by = "month")
dateseq
dateseq <- seq(as.Date("1969/1/1"), as.Date("1984/12/1"), by = "month")
dateseq
?Date
?seq
s$month <- dateseq
head(s)
plot(s$PetrolPrice, type="l")
?write
?write.table
write.table(s, file="seatbelts.csv", sep=",")
setwd("~/Desktop/MSAN/Module4/DataVis")
setwd("~/Desktop/MSAN/Module4/DataVis/data-viz-portfolio")
write.table(s, file="seatbelts.csv", sep=",")
write.table(s, file="seatbelts.csv", sep=",")
